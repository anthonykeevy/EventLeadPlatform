<?xml version="1.0" encoding="UTF-8"?>
<story-context>
  <metadata>
    <epic-id>1</epic-id>
    <story-id>1</story-id>
    <story-title>User Signup and Email Verification</story-title>
    <story-status>Draft</story-status>
    <created-date>2025-10-13</created-date>
    <context-version>1.0</context-version>
  </metadata>

  <user-story>
    <as-a>potential EventLead Platform user</as-a>
    <i-want>to sign up with my email address and receive email verification</i-want>
    <so-that>I can create an account and access the platform after confirming my email</so-that>
  </user-story>

  <acceptance-criteria>
    <criterion id="AC-1.1">User can submit signup form with valid email and password</criterion>
    <criterion id="AC-1.2">System validates email format and password minimum length (8 characters)</criterion>
    <criterion id="AC-1.3">System prevents duplicate email registration (409 error returned)</criterion>
    <criterion id="AC-1.4">System sends verification email within 5 seconds of signup</criterion>
    <criterion id="AC-1.5">Verification email contains secure token link that expires in 24 hours</criterion>
    <criterion id="AC-1.6">User clicking verification link marks `email_verified = true`</criterion>
    <criterion id="AC-1.7">System displays success message and redirects to login page</criterion>
    <criterion id="AC-1.8">User cannot log in until email is verified (403 error returned)</criterion>
  </acceptance-criteria>

  <artifacts>
    <docs>
      <doc path="docs/prd.md" title="Product Requirements Document" section="Authentication & Onboarding Flow">
        <snippet>Phase 1 - Sign Up & Email Verification (Public, Unauthenticated):
1. User visits signup page
2. Enters email and password
3. Submits signup form
4. System sends verification email with secure token link
5. User checks email, clicks verification link
6. Redirected to login page with "Email verified" confirmation
7. User logs in with email/password
8. System generates JWT token for session</snippet>
      </doc>
      <doc path="docs/tech-spec-epic-1.md" title="Epic 1 Technical Specification" section="AC-1: User Signup and Email Verification">
        <snippet>AC-1.1: User can submit signup form with valid email and password
AC-1.2: System validates email format and password minimum length (8 characters)
AC-1.3: System prevents duplicate email registration (409 error returned)
AC-1.4: System sends verification email within 5 seconds of signup
AC-1.5: Verification email contains secure token link that expires in 24 hours
AC-1.6: User clicking verification link marks `email_verified = true`
AC-1.7: System displays success message and redirects to login page
AC-1.8: User cannot log in until email is verified (403 error returned)</snippet>
      </doc>
      <doc path="docs/tech-spec-epic-1.md" title="Epic 1 Technical Specification" section="User Domain Schema">
        <snippet>CREATE TABLE [User] (
    UserID BIGINT IDENTITY(1,1) NOT NULL,        -- Primary key
    Email NVARCHAR(255) NOT NULL,                 -- Unique email address
    PasswordHash NVARCHAR(255) NOT NULL,          -- bcrypt hashed password
    EmailVerified BIT NOT NULL DEFAULT 0,         -- Email verification status
    FirstName NVARCHAR(100) NULL,                 -- User's first name
    LastName NVARCHAR(100) NULL,                  -- User's last name
    Phone NVARCHAR(20) NULL,                      -- Phone number
    RoleTitle NVARCHAR(100) NULL,                 -- Job title/role
    IsActive BIT NOT NULL DEFAULT 1,              -- Account status
    CreatedDate DATETIME2 NOT NULL DEFAULT GETUTCDATE(),
    CreatedBy BIGINT NULL,
    UpdatedDate DATETIME2 NOT NULL DEFAULT GETUTCDATE(),
    UpdatedBy BIGINT NULL,
    IsDeleted BIT NOT NULL DEFAULT 0,
    DeletedDate DATETIME2 NULL,
    DeletedBy BIGINT NULL,
    
    CONSTRAINT PK_User PRIMARY KEY (UserID),
    CONSTRAINT UQ_User_Email UNIQUE (Email),
    CONSTRAINT FK_User_CreatedBy FOREIGN KEY (CreatedBy) REFERENCES [User](UserID),
    CONSTRAINT FK_User_UpdatedBy FOREIGN KEY (UpdatedBy) REFERENCES [User](UserID),
    CONSTRAINT FK_User_DeletedBy FOREIGN KEY (DeletedBy) REFERENCES [User](UserID)
);</snippet>
      </doc>
    </docs>

    <code>
      <file path="backend/modules/auth" kind="directory" symbol="auth_module" lines="0" reason="Authentication module directory - needs to be created for signup endpoints and business logic"/>
      <file path="backend/common" kind="directory" symbol="common_utilities" lines="0" reason="Common utilities directory - needs email.py and security.py for shared functionality"/>
      <file path="backend/templates/emails" kind="directory" symbol="email_templates" lines="0" reason="Email templates directory - needs verification_email.html template"/>
      <file path="frontend/src/features/auth" kind="directory" symbol="auth_features" lines="0" reason="Frontend auth features directory - needs to be created for signup components"/>
      <file path="backend/requirements.txt" kind="file" symbol="python_dependencies" lines="52" reason="Python dependencies including FastAPI, SQLAlchemy, bcrypt, Azure Communication Services, and testing frameworks"/>
      <file path="frontend/package.json" kind="file" symbol="node_dependencies" lines="50" reason="Node.js dependencies including React, react-hook-form, axios, and testing libraries"/>
    </code>

    <dependencies>
      <ecosystem name="python">
        <package name="fastapi" version="0.115.7" purpose="Web framework for API endpoints"/>
        <package name="uvicorn" version="0.34.3" purpose="ASGI server for FastAPI"/>
        <package name="pydantic" version="2.10.6" purpose="Data validation and serialization"/>
        <package name="sqlalchemy" version="2.0.40" purpose="ORM for database operations"/>
        <package name="alembic" version="1.14.1" purpose="Database migration tool"/>
        <package name="passlib" version="1.7.4" purpose="Password hashing utilities"/>
        <package name="bcrypt" version="4.2.1" purpose="Password hashing algorithm"/>
        <package name="python-jose" version="3.3.0" purpose="JWT token handling"/>
        <package name="azure-communication-email" version="1.0.1b1" purpose="Azure email service integration"/>
        <package name="pytest" version="8.3.5" purpose="Testing framework"/>
      </ecosystem>
      <ecosystem name="node">
        <package name="react" version="18.2.0" purpose="Frontend UI framework"/>
        <package name="react-hook-form" version="7.48.2" purpose="Form handling and validation"/>
        <package name="axios" version="1.6.2" purpose="HTTP client for API calls"/>
        <package name="@testing-library/react" version="14.1.2" purpose="React testing utilities"/>
        <package name="vitest" version="1.0.4" purpose="Testing framework"/>
      </ecosystem>
    </dependencies>
  </artifacts>

  <interfaces>
    <interface name="signup_endpoint" kind="REST API" signature="POST /api/auth/signup" path="backend/modules/auth/router.py">
      <description>Signup endpoint that accepts email and password, validates input, creates user record, and sends verification email</description>
    </interface>
    <interface name="email_verification_endpoint" kind="REST API" signature="GET /api/auth/verify-email" path="backend/modules/auth/router.py">
      <description>Email verification endpoint that validates token and marks email as verified</description>
    </interface>
    <interface name="email_service" kind="Service" signature="async def send_verification_email(email: str, token: str)" path="backend/common/email.py">
      <description>Email service for sending verification emails via Azure Communication Services</description>
    </interface>
    <interface name="password_hashing" kind="Utility" signature="def hash_password(password: str) -> str" path="backend/common/security.py">
      <description>Password hashing utility using bcrypt with cost factor 12</description>
    </interface>
    <interface name="signup_form_component" kind="React Component" signature="SignupForm" path="frontend/src/features/auth/components/SignupForm.tsx">
      <description>React component for user signup form with validation and error handling</description>
    </interface>
  </interfaces>

  <constraints>
    <constraint type="architecture">Multi-tenant Architecture: User records must support future company association</constraint>
    <constraint type="security">Security First: All passwords hashed with bcrypt cost factor 12, secure token generation</constraint>
    <constraint type="email">Email Service: Azure Communication Services with verified domain for reliable delivery</constraint>
    <constraint type="performance">Async Processing: Email sending must not block HTTP responses</constraint>
    <constraint type="audit">Audit Trail: All User records include CreatedDate, CreatedBy, UpdatedDate, UpdatedBy, IsDeleted</constraint>
    <constraint type="configuration">Application Configuration: Use Application Specification system for token expiration times</constraint>
    <constraint type="testing">Unit Tests: 80%+ coverage for auth module using pytest</constraint>
    <constraint type="testing">Integration Tests: Full signup flow using TestClient</constraint>
    <constraint type="testing">E2E Tests: Browser automation using Playwright</constraint>
    <constraint type="database">Database Schema: User table with proper audit trail and email verification tokens table</constraint>
    <constraint type="frontend">Frontend: react-hook-form for form validation, axios for API calls</constraint>
  </constraints>

  <tests>
    <standards>
      Testing follows pytest framework for backend unit tests, React Testing Library for frontend component tests, and Playwright for E2E testing. 
      Unit tests require 80%+ coverage for auth module. Integration tests cover complete signup flow using FastAPI TestClient. 
      E2E tests use Playwright for browser automation. Security tests validate token generation, password hashing, and email verification flow.
    </standards>
    <locations>
      <location>backend/tests/</location>
      <location>frontend/src/**/*.test.tsx</location>
      <location>tests/e2e/</location>
    </locations>
    <ideas>
      <test ac-id="AC-1.1" type="unit" description="Test signup endpoint with valid email and password"/>
      <test ac-id="AC-1.1" type="integration" description="Test complete signup flow from form submission to user creation"/>
      <test ac-id="AC-1.2" type="unit" description="Test email format validation using Pydantic"/>
      <test ac-id="AC-1.2" type="unit" description="Test password length validation (minimum 8 characters)"/>
      <test ac-id="AC-1.3" type="unit" description="Test duplicate email prevention with 409 error"/>
      <test ac-id="AC-1.4" type="integration" description="Test email sending within 5 seconds of signup"/>
      <test ac-id="AC-1.5" type="unit" description="Test secure token generation and 24-hour expiration"/>
      <test ac-id="AC-1.6" type="integration" description="Test email verification token validation and user record update"/>
      <test ac-id="AC-1.7" type="e2e" description="Test browser signup flow with email verification and redirect"/>
      <test ac-id="AC-1.8" type="integration" description="Test login prevention for unverified users with 403 error"/>
    </ideas>
  </tests>
</story-context>
