<?xml version="1.0" encoding="UTF-8"?>
<story-context>
  <metadata>
    <epic-id>1</epic-id>
    <story-id>10</story-id>
    <story-title>Enhanced ABR Search with Enterprise Caching</story-title>
    <story-status>Draft</story-status>
    <created-date>2025-10-13</created-date>
    <context-version>1.0</context-version>
  </metadata>

  <user-story>
    <as-a>user setting up a company during onboarding</as-a>
    <i-want>to search for my company using ABN, ACN, or company name with intelligent auto-detection and fast results</i-want>
    <so-that>I can quickly find and select my company with accurate information</so-that>
  </user-story>

  <acceptance-criteria>
    <criterion id="AC-10.1">System provides enhanced company search with auto-detection (ABN/ACN/Name)</criterion>
    <criterion id="AC-10.2">System achieves ~90% search success rate (up from ~20%) with smart search UX</criterion>
    <criterion id="AC-10.3">System validates search results via ABR API with enterprise-grade caching</criterion>
    <criterion id="AC-10.4">System provides 300x faster search results through intelligent caching</criterion>
    <criterion id="AC-10.5">System implements 30-day TTL for search result caching</criterion>
    <criterion id="AC-10.6">System provides real-time search suggestions and auto-completion</criterion>
    <criterion id="AC-10.7">System handles search errors gracefully with fallback options</criterion>
    <criterion id="AC-10.8">System logs search analytics for performance optimization</criterion>
    <criterion id="AC-10.9">System provides search result validation and data enrichment</criterion>
    <criterion id="AC-10.10">System implements search result ranking and relevance scoring</criterion>
    <criterion id="AC-10.11">System provides search history and recent searches</criterion>
    <criterion id="AC-10.12">System implements search result export and sharing capabilities</criterion>
  </acceptance-criteria>

  <artifacts>
    <docs>
      <doc path="docs/tech-spec-epic-1.md" title="Epic 1 Technical Specification" section="AC-10: Enhanced ABR Search">
        <snippet>AC-10.1: System provides enhanced company search with auto-detection (ABN/ACN/Name)
AC-10.2: System achieves ~90% search success rate (up from ~20%) with smart search UX
AC-10.3: System validates search results via ABR API with enterprise-grade caching
AC-10.4: System provides 300x faster search results through intelligent caching
AC-10.5: System implements 30-day TTL for search result caching
AC-10.6: System provides real-time search suggestions and auto-completion</snippet>
      </doc>
      <doc path="docs/tech-spec-epic-1.md" title="Epic 1 Technical Specification" section="Enhanced ABR Search Implementation">
        <snippet>Enhanced ABR Search with enterprise-grade caching:
- Smart search detection (ABN/ACN/Company Name patterns)
- Enterprise caching with 30-day TTL for 300x performance improvement
- Search result validation and data enrichment
- Search analytics and success rate tracking
- Real-time search suggestions and auto-completion</snippet>
      </doc>
    </docs>

    <code>
      <file path="backend/modules/companies/abr_client.py" kind="file" symbol="abr_client" lines="0" reason="ABR client - needs ABR API integration for company search"/>
      <file path="backend/modules/companies/cache_service.py" kind="file" symbol="cache_service" lines="0" reason="Cache service - needs enterprise-grade caching for ABR search results"/>
      <file path="backend/modules/companies/router.py" kind="file" symbol="companies_router" lines="0" reason="Companies router - needs enhanced search endpoint"/>
      <file path="frontend/src/features/companies/components/SmartCompanySearch.tsx" kind="file" symbol="smart_search" lines="0" reason="Smart company search component - needs enhanced search with auto-detection"/>
      <file path="frontend/src/features/companies/components/CompanySearchResults.tsx" kind="file" symbol="search_results" lines="0" reason="Company search results component - needs result display and selection"/>
    </code>

    <dependencies>
      <ecosystem name="python">
        <package name="httpx" version="0.28.1" purpose="HTTP client for ABR API integration"/>
        <package name="redis" version="5.0.0" purpose="Redis client for enterprise caching"/>
        <package name="fastapi" version="0.115.7" purpose="Web framework for search endpoints"/>
      </ecosystem>
      <ecosystem name="node">
        <package name="react" version="18.2.0" purpose="Frontend UI framework"/>
        <package name="axios" version="1.6.2" purpose="HTTP client for search API calls"/>
        <package name="framer-motion" version="10.16.5" purpose="Animation library for search interactions"/>
      </ecosystem>
    </dependencies>
  </artifacts>

  <interfaces>
    <interface name="abr_search_endpoint" kind="REST API" signature="GET /api/companies/search" path="backend/modules/companies/router.py">
      <description>Enhanced ABR search endpoint with smart detection and caching</description>
    </interface>
    <interface name="abr_client" kind="Service" signature="async def search_company(query: str) -> dict" path="backend/modules/companies/abr_client.py">
      <description>ABR API client for company search and validation</description>
    </interface>
    <interface name="cache_service" kind="Service" signature="def get_cached_result(key: str) -> dict" path="backend/modules/companies/cache_service.py">
      <description>Enterprise caching service for ABR search results</description>
    </interface>
    <interface name="smart_search_component" kind="React Component" signature="SmartCompanySearch" path="frontend/src/features/companies/components/SmartCompanySearch.tsx">
      <description>Enhanced company search component with auto-detection</description>
    </interface>
    <interface name="search_results_component" kind="React Component" signature="CompanySearchResults" path="frontend/src/features/companies/components/CompanySearchResults.tsx">
      <description>Company search results component with selection and validation</description>
    </interface>
  </interfaces>

  <constraints>
    <constraint type="performance">Enterprise Caching: Redis-based caching with 30-day TTL for 300x performance improvement</constraint>
    <constraint type="user-experience">Smart Search Detection: Automatic pattern recognition for ABN, ACN, and company names</constraint>
    <constraint type="performance">Search Analytics: Comprehensive tracking and optimization</constraint>
    <constraint type="user-experience">Real-time Suggestions: Auto-completion and search suggestions</constraint>
    <constraint type="testing">Unit Tests: 80%+ coverage for ABR integration and caching using pytest</constraint>
    <constraint type="testing">Integration Tests: Complete search flow with ABR API using TestClient</constraint>
    <constraint type="testing">E2E Tests: Browser search functionality using Playwright</constraint>
  </constraints>

  <tests>
    <standards>
      Testing follows pytest framework for backend unit tests, React Testing Library for frontend component tests, and Playwright for E2E testing.
      Unit tests require 80%+ coverage for ABR integration and caching. Integration tests cover complete search flow with ABR API using FastAPI TestClient.
      E2E tests use Playwright for browser search functionality and performance validation.
    </standards>
    <locations>
      <location>backend/tests/</location>
      <location>frontend/src/**/*.test.tsx</location>
      <location>tests/e2e/</location>
    </locations>
    <ideas>
      <test ac-id="AC-10.1" type="unit" description="Test enhanced company search with auto-detection"/>
      <test ac-id="AC-10.2" type="performance" description="Test search success rate improvement to ~90%"/>
      <test ac-id="AC-10.3" type="integration" description="Test ABR API integration with enterprise caching"/>
      <test ac-id="AC-10.4" type="performance" description="Test 300x faster search results through caching"/>
      <test ac-id="AC-10.5" type="unit" description="Test 30-day TTL for search result caching"/>
      <test ac-id="AC-10.6" type="unit" description="Test real-time search suggestions and auto-completion"/>
      <test ac-id="AC-10.7" type="unit" description="Test search error handling with fallback options"/>
      <test ac-id="AC-10.8" type="unit" description="Test search analytics logging and optimization"/>
      <test ac-id="AC-10.9" type="integration" description="Test search result validation and data enrichment"/>
      <test ac-id="AC-10.10" type="unit" description="Test search result ranking and relevance scoring"/>
      <test ac-id="AC-10.11" type="e2e" description="Test search history and recent searches"/>
      <test ac-id="AC-10.12" type="e2e" description="Test search result export and sharing capabilities"/>
    </ideas>
  </tests>
</story-context>
