<?xml version="1.0" encoding="UTF-8"?>
<story-context>
  <metadata>
    <epic-id>1</epic-id>
    <story-id>11</story-id>
    <story-title>Branch Company Scenarios and Company Switching</story-title>
    <story-status>Draft</story-status>
    <created-date>2025-10-13</created-date>
    <context-version>1.0</context-version>
  </metadata>

  <user-story>
    <as-a>user working with branch companies or parent-subsidiary relationships</as-a>
    <i-want>to handle complex company invitation scenarios and company switching</i-want>
    <so-that>I can manage relationships between head offices, branches, and subsidiaries effectively</so-that>
  </user-story>

  <acceptance-criteria>
    <criterion id="AC-11.1">System supports parent-subsidiary company relationships</criterion>
    <criterion id="AC-11.2">System handles branch company invitation scenarios</criterion>
    <criterion id="AC-11.3">System provides company switching functionality for multi-company users</criterion>
    <criterion id="AC-11.4">System implements company access request workflow</criterion>
    <criterion id="AC-11.5">System enforces proper authorization for cross-company operations</criterion>
    <criterion id="AC-11.6">System provides company relationship management interface</criterion>
    <criterion id="AC-11.7">System logs all company relationship activities for audit</criterion>
    <criterion id="AC-11.8">System handles company switching UX with proper context</criterion>
    <criterion id="AC-11.9">System implements company access validation and approval</criterion>
    <criterion id="AC-11.10">System provides company relationship analytics and reporting</criterion>
  </acceptance-criteria>

  <artifacts>
    <docs>
      <doc path="docs/tech-spec-epic-1.md" title="Epic 1 Technical Specification" section="AC-11: Branch Company Scenarios">
        <snippet>AC-11.1: System supports parent-subsidiary company relationships
AC-11.2: System handles branch company invitation scenarios
AC-11.3: System provides company switching functionality for multi-company users
AC-11.4: System implements company access request workflow
AC-11.5: System enforces proper authorization for cross-company operations</snippet>
      </doc>
    </docs>

    <code>
      <file path="backend/modules/companies/relationship_service.py" kind="file" symbol="relationship_service" lines="0" reason="Company relationship service - needs parent-subsidiary relationship management"/>
      <file path="backend/modules/companies/switch_service.py" kind="file" symbol="switch_service" lines="0" reason="Company switching service - needs company switching logic and validation"/>
      <file path="frontend/src/features/companies/components/CompanySwitcher.tsx" kind="file" symbol="company_switcher" lines="0" reason="Company switcher component - needs company switching UX"/>
      <file path="frontend/src/features/companies/components/CompanyAccessRequest.tsx" kind="file" symbol="company_access_request" lines="0" reason="Company access request component - needs access request interface"/>
    </code>

    <dependencies>
      <ecosystem name="python">
        <package name="fastapi" version="0.115.7" purpose="Web framework for company relationship endpoints"/>
        <package name="sqlalchemy" version="2.0.40" purpose="ORM for company relationship data operations"/>
        <package name="pydantic" version="2.10.6" purpose="Request/response validation for company relationships"/>
      </ecosystem>
      <ecosystem name="node">
        <package name="react" version="18.2.0" purpose="Frontend UI framework"/>
        <package name="axios" version="1.6.2" purpose="HTTP client for company relationship API calls"/>
        <package name="@radix-ui/react-dialog" version="1.0.5" purpose="Modal components for company switching"/>
      </ecosystem>
    </dependencies>
  </artifacts>

  <interfaces>
    <interface name="company_relationship_endpoint" kind="REST API" signature="POST /api/companies/relationships" path="backend/modules/companies/router.py">
      <description>Endpoint for managing company relationships and hierarchies</description>
    </interface>
    <interface name="company_switching_endpoint" kind="REST API" signature="POST /api/companies/switch" path="backend/modules/companies/router.py">
      <description>Endpoint for company switching functionality</description>
    </interface>
    <interface name="company_access_request_endpoint" kind="REST API" signature="POST /api/companies/access-request" path="backend/modules/companies/router.py">
      <description>Endpoint for company access request workflow</description>
    </interface>
    <interface name="company_switcher_component" kind="React Component" signature="CompanySwitcher" path="frontend/src/features/companies/components/CompanySwitcher.tsx">
      <description>Company switcher component with proper context management</description>
    </interface>
    <interface name="company_access_request_component" kind="React Component" signature="CompanyAccessRequest" path="frontend/src/features/companies/components/CompanyAccessRequest.tsx">
      <description>Company access request component for cross-company access</description>
    </interface>
  </interfaces>

  <constraints>
    <constraint type="architecture">Hierarchical Company Structure: Parent-subsidiary relationships with proper authorization</constraint>
    <constraint type="security">Company Switching: Multi-company user support with context switching</constraint>
    <constraint type="security">Access Control: Cross-company operation validation and approval</constraint>
    <constraint type="audit">Audit Trail: Comprehensive logging for all company relationship activities</constraint>
    <constraint type="user-experience">Seamless Switching: Company switching with proper context</constraint>
    <constraint type="testing">Unit Tests: 80%+ coverage for company relationship module using pytest</constraint>
    <constraint type="testing">Integration Tests: Company relationship workflow using TestClient</constraint>
    <constraint type="testing">E2E Tests: Browser company relationship management using Playwright</constraint>
  </constraints>

  <tests>
    <standards>
      Testing follows pytest framework for backend unit tests, React Testing Library for frontend component tests, and Playwright for E2E testing.
      Unit tests require 80%+ coverage for company relationship module. Integration tests cover company relationship workflow using FastAPI TestClient.
      E2E tests use Playwright for browser company relationship management and switching scenarios.
    </standards>
    <locations>
      <location>backend/tests/</location>
      <location>frontend/src/**/*.test.tsx</location>
      <location>tests/e2e/</location>
    </locations>
    <ideas>
      <test ac-id="AC-11.1" type="unit" description="Test parent-subsidiary company relationship support"/>
      <test ac-id="AC-11.2" type="integration" description="Test branch company invitation scenarios"/>
      <test ac-id="AC-11.3" type="unit" description="Test company switching functionality for multi-company users"/>
      <test ac-id="AC-11.4" type="integration" description="Test company access request workflow"/>
      <test ac-id="AC-11.5" type="unit" description="Test authorization for cross-company operations"/>
      <test ac-id="AC-11.6" type="e2e" description="Test company relationship management interface"/>
      <test ac-id="AC-11.7" type="unit" description="Test company relationship activity logging"/>
      <test ac-id="AC-11.8" type="e2e" description="Test company switching UX with proper context"/>
      <test ac-id="AC-11.9" type="unit" description="Test company access validation and approval"/>
      <test ac-id="AC-11.10" type="unit" description="Test company relationship analytics and reporting"/>
    </ideas>
  </tests>
</story-context>
