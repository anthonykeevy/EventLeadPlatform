<?xml version="1.0" encoding="UTF-8"?>
<story-context>
  <metadata>
    <epic-id>1</epic-id>
    <story-id>2</story-id>
    <story-title>User Login and JWT Token Generation</story-title>
    <story-status>Draft</story-status>
    <created-date>2025-10-13</created-date>
    <context-version>1.0</context-version>
  </metadata>

  <user-story>
    <as-a>verified EventLead Platform user</as-a>
    <i-want>to log in with my email and password to receive secure access tokens</i-want>
    <so-that>I can access the platform and maintain an authenticated session</so-that>
  </user-story>

  <acceptance-criteria>
    <criterion id="AC-2.1">User can submit login form with email and password</criterion>
    <criterion id="AC-2.2">System validates credentials and returns JWT access token (15-minute expiration)</criterion>
    <criterion id="AC-2.3">System returns JWT refresh token (7-day expiration)</criterion>
    <criterion id="AC-2.4">JWT tokens include: user_id, email, role, company_id, exp, iat</criterion>
    <criterion id="AC-2.5">System returns 200 success response with tokens</criterion>
    <criterion id="AC-2.6">System returns 401 error for invalid credentials</criterion>
    <criterion id="AC-2.7">System returns 403 error if email not verified</criterion>
  </acceptance-criteria>

  <artifacts>
    <docs>
      <doc path="docs/tech-spec-epic-1.md" title="Epic 1 Technical Specification" section="AC-2: User Login and JWT Token Generation">
        <snippet>AC-2.1: User can submit login form with email and password
AC-2.2: System validates credentials and returns JWT access token (15-minute expiration)
AC-2.3: System returns JWT refresh token (7-day expiration)
AC-2.4: JWT tokens include: user_id, email, role, company_id, exp, iat
AC-2.5: System returns 200 success response with tokens
AC-2.6: System returns 401 error for invalid credentials
AC-2.7: System returns 403 error if email not verified</snippet>
      </doc>
      <doc path="docs/tech-spec-epic-1.md" title="Epic 1 Technical Specification" section="JWT Token Management">
        <snippet>JWT tokens include required claims: user_id, email, role, company_id, exp, iat
Access token expiration: 15 minutes
Refresh token expiration: 7 days
Token signing with RS256 algorithm
Secure JWT secret from Application Specification system</snippet>
      </doc>
    </docs>

    <code>
      <file path="backend/modules/auth/router.py" kind="file" symbol="auth_router" lines="0" reason="Authentication router - needs login endpoint implementation"/>
      <file path="backend/modules/auth/service.py" kind="file" symbol="auth_service" lines="0" reason="Authentication service - needs JWT token generation and credential validation"/>
      <file path="backend/modules/auth/middleware.py" kind="file" symbol="auth_middleware" lines="0" reason="Authentication middleware - needs JWT validation middleware"/>
      <file path="frontend/src/features/auth/contexts/AuthContext.tsx" kind="file" symbol="auth_context" lines="0" reason="Frontend auth context - needs token management and refresh logic"/>
      <file path="frontend/src/features/auth/components/LoginForm.tsx" kind="file" symbol="login_form" lines="0" reason="Login form component - needs form validation and submission"/>
      <file path="frontend/src/features/auth/components/ProtectedRoute.tsx" kind="file" symbol="protected_route" lines="0" reason="Protected route component - needs authentication checking"/>
    </code>

    <dependencies>
      <ecosystem name="python">
        <package name="python-jose" version="3.3.0" purpose="JWT token generation and validation"/>
        <package name="passlib" version="1.7.4" purpose="Password verification with bcrypt"/>
        <package name="bcrypt" version="4.2.1" purpose="Password hashing verification"/>
        <package name="fastapi" version="0.115.7" purpose="Web framework for login endpoints"/>
        <package name="pydantic" version="2.10.6" purpose="Request/response validation"/>
      </ecosystem>
      <ecosystem name="node">
        <package name="react" version="18.2.0" purpose="Frontend UI framework"/>
        <package name="react-hook-form" version="7.48.2" purpose="Login form handling and validation"/>
        <package name="axios" version="1.6.2" purpose="HTTP client for login API calls"/>
        <package name="zustand" version="4.4.6" purpose="State management for auth context"/>
      </ecosystem>
    </dependencies>
  </artifacts>

  <interfaces>
    <interface name="login_endpoint" kind="REST API" signature="POST /api/auth/login" path="backend/modules/auth/router.py">
      <description>Login endpoint that validates credentials and returns JWT tokens</description>
    </interface>
    <interface name="jwt_token_generation" kind="Service" signature="def generate_tokens(user_id: str, email: str, role: str, company_id: str) -> dict" path="backend/modules/auth/service.py">
      <description>JWT token generation service for access and refresh tokens</description>
    </interface>
    <interface name="password_verification" kind="Utility" signature="def verify_password(password: str, hashed: str) -> bool" path="backend/common/security.py">
      <description>Password verification utility using bcrypt</description>
    </interface>
    <interface name="auth_context" kind="React Context" signature="AuthContext" path="frontend/src/features/auth/contexts/AuthContext.tsx">
      <description>React context for authentication state and token management</description>
    </interface>
    <interface name="login_form_component" kind="React Component" signature="LoginForm" path="frontend/src/features/auth/components/LoginForm.tsx">
      <description>React component for user login form with validation</description>
    </interface>
  </interfaces>

  <constraints>
    <constraint type="security">JWT-based Authentication: Stateless tokens with secure signing using RS256</constraint>
    <constraint type="security">Token Refresh Strategy: Short-lived access tokens (15 min) with longer-lived refresh tokens (7 days)</constraint>
    <constraint type="security">Rate Limiting: 5 attempts per minute to prevent brute force attacks</constraint>
    <constraint type="architecture">Multi-tenant Support: Tokens include company_id for future multi-tenant features</constraint>
    <constraint type="configuration">Application Configuration: Token expiration times managed via Application Specification system</constraint>
    <constraint type="testing">Unit Tests: 80%+ coverage for auth module using pytest</constraint>
    <constraint type="testing">Integration Tests: Complete login flow using TestClient</constraint>
    <constraint type="testing">E2E Tests: Browser login and session management using Playwright</constraint>
  </constraints>

  <tests>
    <standards>
      Testing follows pytest framework for backend unit tests, React Testing Library for frontend component tests, and Playwright for E2E testing.
      Unit tests require 80%+ coverage for auth module. Integration tests cover complete login flow using FastAPI TestClient.
      E2E tests use Playwright for browser login scenarios and session management.
    </standards>
    <locations>
      <location>backend/tests/</location>
      <location>frontend/src/**/*.test.tsx</location>
      <location>tests/e2e/</location>
    </locations>
    <ideas>
      <test ac-id="AC-2.1" type="unit" description="Test login endpoint with valid email and password"/>
      <test ac-id="AC-2.2" type="unit" description="Test JWT access token generation with 15-minute expiration"/>
      <test ac-id="AC-2.3" type="unit" description="Test JWT refresh token generation with 7-day expiration"/>
      <test ac-id="AC-2.4" type="unit" description="Test JWT token claims include required fields"/>
      <test ac-id="AC-2.5" type="integration" description="Test successful login returns 200 with tokens"/>
      <test ac-id="AC-2.6" type="integration" description="Test invalid credentials return 401 error"/>
      <test ac-id="AC-2.7" type="integration" description="Test unverified email returns 403 error"/>
      <test ac-id="AC-2.1" type="e2e" description="Test browser login form submission and success"/>
      <test ac-id="AC-2.4" type="e2e" description="Test token storage and session management in browser"/>
    </ideas>
  </tests>
</story-context>
