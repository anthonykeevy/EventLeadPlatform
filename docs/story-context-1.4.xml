<?xml version="1.0" encoding="UTF-8"?>
<story-context>
  <metadata>
    <epic-id>1</epic-id>
    <story-id>4</story-id>
    <story-title>Password Reset Functionality</story-title>
    <story-status>Draft</story-status>
    <created-date>2025-10-13</created-date>
    <context-version>1.0</context-version>
  </metadata>

  <user-story>
    <as-a>EventLead Platform user who has forgotten their password</as-a>
    <i-want>to request a password reset via email and securely set a new password</i-want>
    <so-that>I can regain access to my account without compromising security</so-that>
  </user-story>

  <acceptance-criteria>
    <criterion id="AC-4.1">User can request password reset by entering their email address</criterion>
    <criterion id="AC-4.2">System validates email exists and is verified</criterion>
    <criterion id="AC-4.3">System generates secure reset token with 1-hour expiration</criterion>
    <criterion id="AC-4.4">System sends password reset email within 5 seconds</criterion>
    <criterion id="AC-4.5">Reset email contains secure token link to password reset form</criterion>
    <criterion id="AC-4.6">User can submit new password using valid reset token</criterion>
    <criterion id="AC-4.7">System validates new password meets requirements (minimum 8 characters)</criterion>
    <criterion id="AC-4.8">System invalidates reset token after successful password change</criterion>
    <criterion id="AC-4.9">System logs password reset activities for security audit</criterion>
    <criterion id="AC-4.10">System returns appropriate success/error messages</criterion>
  </acceptance-criteria>

  <artifacts>
    <docs>
      <doc path="docs/tech-spec-epic-1.md" title="Epic 1 Technical Specification" section="AC-4: Password Reset">
        <snippet>AC-4.1: User can request password reset by entering their email address
AC-4.2: System validates email exists and is verified
AC-4.3: System generates secure reset token with 1-hour expiration
AC-4.4: System sends password reset email within 5 seconds
AC-4.5: Reset email contains secure token link to password reset form
AC-4.6: User can submit new password using valid reset token
AC-4.7: System validates new password meets requirements (minimum 8 characters)
AC-4.8: System invalidates reset token after successful password change
AC-4.9: System logs password reset activities for security audit
AC-4.10: System returns appropriate success/error messages</snippet>
      </doc>
      <doc path="docs/tech-spec-epic-1.md" title="Epic 1 Technical Specification" section="Email Service Integration">
        <snippet>Email service abstraction using Azure Communication Services
Async email sending to avoid blocking HTTP requests
Email template management for verification and reset emails
Email delivery tracking and error handling</snippet>
      </doc>
    </docs>

    <code>
      <file path="backend/modules/auth/router.py" kind="file" symbol="auth_router" lines="0" reason="Authentication router - needs password reset request and confirmation endpoints"/>
      <file path="backend/modules/auth/service.py" kind="file" symbol="auth_service" lines="0" reason="Authentication service - needs password reset business logic and token management"/>
      <file path="backend/common/email.py" kind="file" symbol="email_service" lines="0" reason="Email service - needs password reset email template and sending"/>
      <file path="backend/templates/emails/password_reset_email.html" kind="file" symbol="reset_email_template" lines="0" reason="Password reset email template - needs HTML template with secure token link"/>
      <file path="frontend/src/features/auth/components/PasswordResetRequest.tsx" kind="file" symbol="reset_request_form" lines="0" reason="Password reset request form component - needs email input and validation"/>
      <file path="frontend/src/features/auth/components/PasswordResetForm.tsx" kind="file" symbol="reset_form" lines="0" reason="Password reset form component - needs new password input and validation"/>
    </code>

    <dependencies>
      <ecosystem name="python">
        <package name="fastapi" version="0.115.7" purpose="Web framework for password reset endpoints"/>
        <package name="passlib" version="1.7.4" purpose="Password hashing for new password storage"/>
        <package name="bcrypt" version="4.2.1" purpose="Password hashing algorithm"/>
        <package name="azure-communication-email" version="1.0.1b1" purpose="Azure email service for password reset emails"/>
        <package name="pydantic" version="2.10.6" purpose="Request/response validation for password reset"/>
      </ecosystem>
      <ecosystem name="node">
        <package name="react" version="18.2.0" purpose="Frontend UI framework"/>
        <package name="react-hook-form" version="7.48.2" purpose="Form handling for password reset forms"/>
        <package name="axios" version="1.6.2" purpose="HTTP client for password reset API calls"/>
      </ecosystem>
    </dependencies>
  </artifacts>

  <interfaces>
    <interface name="password_reset_request_endpoint" kind="REST API" signature="POST /api/auth/reset-password-request" path="backend/modules/auth/router.py">
      <description>Endpoint for requesting password reset with email validation</description>
    </interface>
    <interface name="password_reset_confirm_endpoint" kind="REST API" signature="POST /api/auth/reset-password" path="backend/modules/auth/router.py">
      <description>Endpoint for confirming password reset with token validation</description>
    </interface>
    <interface name="reset_token_generation" kind="Service" signature="def generate_reset_token(email: str) -> str" path="backend/modules/auth/service.py">
      <description>Secure reset token generation with 1-hour expiration</description>
    </interface>
    <interface name="password_reset_email" kind="Service" signature="async def send_password_reset_email(email: str, token: str)" path="backend/common/email.py">
      <description>Email service for sending password reset emails</description>
    </interface>
    <interface name="password_reset_request_component" kind="React Component" signature="PasswordResetRequest" path="frontend/src/features/auth/components/PasswordResetRequest.tsx">
      <description>React component for password reset request form</description>
    </interface>
    <interface name="password_reset_form_component" kind="React Component" signature="PasswordResetForm" path="frontend/src/features/auth/components/PasswordResetForm.tsx">
      <description>React component for password reset form with new password input</description>
    </interface>
  </interfaces>

  <constraints>
    <constraint type="security">Secure Token Generation: Cryptographically secure reset tokens with 1-hour expiration</constraint>
    <constraint type="security">Email-based Reset: Secure reset flow via email verification</constraint>
    <constraint type="security">Rate Limiting: Protection against abuse and brute force attacks (3 requests per hour per email)</constraint>
    <constraint type="security">Single-use Tokens: Tokens invalidated after successful password change</constraint>
    <constraint type="audit">Activity Logging: Comprehensive audit trail for security monitoring</constraint>
    <constraint type="performance">Email Delivery: Password reset email sent within 5 seconds</constraint>
    <constraint type="configuration">Application Configuration: Token expiration managed via Application Specification system</constraint>
    <constraint type="testing">Unit Tests: 80%+ coverage for password reset module using pytest</constraint>
    <constraint type="testing">Integration Tests: Complete password reset flow using TestClient</constraint>
    <constraint type="testing">E2E Tests: Browser password reset flow using Playwright</constraint>
  </constraints>

  <tests>
    <standards>
      Testing follows pytest framework for backend unit tests, React Testing Library for frontend component tests, and Playwright for E2E testing.
      Unit tests require 80%+ coverage for password reset module. Integration tests cover complete password reset flow using FastAPI TestClient.
      E2E tests use Playwright for browser password reset scenarios and token validation.
    </standards>
    <locations>
      <location>backend/tests/</location>
      <location>frontend/src/**/*.test.tsx</location>
      <location>tests/e2e/</location>
    </locations>
    <ideas>
      <test ac-id="AC-4.1" type="unit" description="Test password reset request endpoint with valid email"/>
      <test ac-id="AC-4.2" type="unit" description="Test email validation and verification status check"/>
      <test ac-id="AC-4.3" type="unit" description="Test secure reset token generation with 1-hour expiration"/>
      <test ac-id="AC-4.4" type="integration" description="Test password reset email delivery within 5 seconds"/>
      <test ac-id="AC-4.5" type="unit" description="Test reset email template with secure token link"/>
      <test ac-id="AC-4.6" type="integration" description="Test password reset confirmation with valid token"/>
      <test ac-id="AC-4.7" type="unit" description="Test new password validation (minimum 8 characters)"/>
      <test ac-id="AC-4.8" type="unit" description="Test reset token invalidation after successful password change"/>
      <test ac-id="AC-4.9" type="unit" description="Test password reset activity logging"/>
      <test ac-id="AC-4.10" type="e2e" description="Test browser password reset flow with success/error messages"/>
    </ideas>
  </tests>
</story-context>
