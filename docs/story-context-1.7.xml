<?xml version="1.0" encoding="UTF-8"?>
<story-context>
  <metadata>
    <epic-id>1</epic-id>
    <story-id>7</story-id>
    <story-title>RBAC Middleware and Authorization</story-title>
    <story-status>Draft</story-status>
    <created-date>2025-10-13</created-date>
    <context-version>1.0</context-version>
  </metadata>

  <user-story>
    <as-a>EventLead Platform system</as-a>
    <i-want>to enforce role-based access control across all protected endpoints</i-want>
    <so-that>users can only access resources and perform actions appropriate to their role</so-that>
  </user-story>

  <acceptance-criteria>
    <criterion id="AC-7.1">System validates JWT tokens on all protected endpoints</criterion>
    <criterion id="AC-7.2">System extracts user information from JWT claims (user_id, role, company_id)</criterion>
    <criterion id="AC-7.3">System enforces role-based permissions for different endpoint access</criterion>
    <criterion id="AC-7.4">Company Admin can access all company resources and team management</criterion>
    <criterion id="AC-7.5">Company User can access limited company resources (no team management)</criterion>
    <criterion id="AC-7.6">System returns 401 error for invalid or expired tokens</criterion>
    <criterion id="AC-7.7">System returns 403 error for insufficient permissions</criterion>
  </acceptance-criteria>

  <artifacts>
    <docs>
      <doc path="docs/tech-spec-epic-1.md" title="Epic 1 Technical Specification" section="AC-7: RBAC Middleware">
        <snippet>AC-7.1: System validates JWT tokens on all protected endpoints
AC-7.2: System extracts user information from JWT claims (user_id, role, company_id)
AC-7.3: System enforces role-based permissions for different endpoint access
AC-7.4: Company Admin can access all company resources and team management
AC-7.5: Company User can access limited company resources (no team management)
AC-7.6: System returns 401 error for invalid or expired tokens
AC-7.7: System returns 403 error for insufficient permissions</snippet>
      </doc>
      <doc path="docs/tech-spec-epic-1.md" title="Epic 1 Technical Specification" section="Role Definitions">
        <snippet>System Admin: Platform-wide access (backend only for MVP)
Company Admin: Full company access, team management, billing
Company User: Limited company access, no team management</snippet>
      </doc>
    </docs>

    <code>
      <file path="backend/modules/auth/middleware.py" kind="file" symbol="auth_middleware" lines="0" reason="Authentication middleware - needs JWT token validation and role-based authorization"/>
      <file path="backend/modules/auth/service.py" kind="file" symbol="auth_service" lines="0" reason="Authentication service - needs JWT token validation and user context extraction"/>
      <file path="frontend/src/features/auth/contexts/AuthContext.tsx" kind="file" symbol="auth_context" lines="0" reason="Frontend auth context - needs role information and permission checking"/>
      <file path="frontend/src/features/auth/components/ProtectedRoute.tsx" kind="file" symbol="protected_route" lines="0" reason="Protected route component - needs authentication and role-based route protection"/>
    </code>

    <dependencies>
      <ecosystem name="python">
        <package name="python-jose" version="3.3.0" purpose="JWT token validation and user context extraction"/>
        <package name="fastapi" version="0.115.7" purpose="Web framework for middleware integration"/>
        <package name="pydantic" version="2.10.6" purpose="Request/response validation for authorization"/>
      </ecosystem>
      <ecosystem name="node">
        <package name="react" version="18.2.0" purpose="Frontend UI framework"/>
        <package name="zustand" version="4.4.6" purpose="State management for auth context and roles"/>
        <package name="axios" version="1.6.2" purpose="HTTP client with authentication headers"/>
      </ecosystem>
    </dependencies>
  </artifacts>

  <interfaces>
    <interface name="auth_middleware" kind="Middleware" signature="@require_auth" path="backend/modules/auth/middleware.py">
      <description>Authentication middleware decorator for JWT token validation</description>
    </interface>
    <interface name="role_middleware" kind="Middleware" signature="@require_role(role: str)" path="backend/modules/auth/middleware.py">
      <description>Role-based authorization middleware decorator</description>
    </interface>
    <interface name="permission_middleware" kind="Middleware" signature="@require_permission(permission: str)" path="backend/modules/auth/middleware.py">
      <description>Permission-based authorization middleware decorator</description>
    </interface>
    <interface name="jwt_validation" kind="Service" signature="def validate_jwt(token: str) -> dict" path="backend/modules/auth/service.py">
      <description>JWT token validation service with user context extraction</description>
    </interface>
    <interface name="auth_context" kind="React Context" signature="AuthContext" path="frontend/src/features/auth/contexts/AuthContext.tsx">
      <description>React context for authentication state and role information</description>
    </interface>
    <interface name="protected_route" kind="React Component" signature="ProtectedRoute" path="frontend/src/features/auth/components/ProtectedRoute.tsx">
      <description>Protected route component with authentication and role checking</description>
    </interface>
  </interfaces>

  <constraints>
    <constraint type="security">JWT-based Authentication: Stateless tokens with role information</constraint>
    <constraint type="security">Role-based Access Control: Three-tier role system with defined permissions</constraint>
    <constraint type="architecture">Middleware Architecture: Centralized authorization enforcement</constraint>
    <constraint type="security">Security First: Comprehensive error handling and security logging</constraint>
    <constraint type="testing">Unit Tests: 80%+ coverage for authorization middleware using pytest</constraint>
    <constraint type="testing">Integration Tests: Protected endpoint access using TestClient</constraint>
    <constraint type="testing">E2E Tests: Browser authorization scenarios using Playwright</constraint>
  </constraints>

  <tests>
    <standards>
      Testing follows pytest framework for backend unit tests, React Testing Library for frontend component tests, and Playwright for E2E testing.
      Unit tests require 80%+ coverage for authorization middleware. Integration tests cover protected endpoint access using FastAPI TestClient.
      E2E tests use Playwright for browser authorization scenarios and role-based access control.
    </standards>
    <locations>
      <location>backend/tests/</location>
      <location>frontend/src/**/*.test.tsx</location>
      <location>tests/e2e/</location>
    </locations>
    <ideas>
      <test ac-id="AC-7.1" type="unit" description="Test JWT token validation on protected endpoints"/>
      <test ac-id="AC-7.2" type="unit" description="Test user information extraction from JWT claims"/>
      <test ac-id="AC-7.3" type="unit" description="Test role-based permissions for endpoint access"/>
      <test ac-id="AC-7.4" type="integration" description="Test Company Admin access to all company resources"/>
      <test ac-id="AC-7.5" type="integration" description="Test Company User limited access restrictions"/>
      <test ac-id="AC-7.6" type="integration" description="Test 401 error for invalid/expired tokens"/>
      <test ac-id="AC-7.7" type="integration" description="Test 403 error for insufficient permissions"/>
      <test ac-id="AC-7.1" type="e2e" description="Test browser authentication and token validation"/>
      <test ac-id="AC-7.3" type="e2e" description="Test browser role-based access control"/>
    </ideas>
  </tests>
</story-context>
